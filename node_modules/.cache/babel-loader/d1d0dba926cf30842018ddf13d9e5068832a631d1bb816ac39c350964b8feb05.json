{"ast":null,"code":"\"use strict\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.jsx\nvar src_exports = {};\n__export(src_exports, {\n  default: () => src_default\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_react = require(\"react\");\nvar import_prop_types = __toESM(require(\"prop-types\"));\nvar DefaultCanvasSize = 16;\nvar linkElements = [];\nvar drawAlert = (context, _ref) => {\n  let {\n    fillColor,\n    text,\n    textColor,\n    canvasSize\n  } = _ref;\n  const Padding = canvasSize / 5;\n  context.font = `bold ${canvasSize - Padding * 2}px arial`;\n  const w = Math.min(\n  // Take the text with if it's smaller than available space (eg: '2')\n  context.measureText(text).width,\n  // Or take the maximum size we'll force our text to fit in anyway (eg: '1000000')\n  canvasSize - Padding) + Padding;\n  const x = canvasSize - w;\n  const y = canvasSize / 2 - Padding;\n  const h = Padding + canvasSize / 2;\n  const r = Math.min(w / 2, h / 2);\n  context.beginPath();\n  context.moveTo(x + r, y);\n  context.arcTo(x + w, y, x + w, y + h, r);\n  context.arcTo(x + w, y + h, x, y + h, r);\n  context.arcTo(x, y + h, x, y, r);\n  context.arcTo(x, y, x + w, y, r);\n  context.closePath();\n  context.fillStyle = fillColor;\n  context.fill();\n  context.fillStyle = textColor;\n  context.textBaseline = \"bottom\";\n  context.textAlign = \"right\";\n  context.fillText(text, canvasSize - Padding / 2, canvasSize,\n  // This will prevent the text from going outside the favicon, instead it'll squeeze his with to fit in\n  canvasSize - Padding);\n};\nvar drawIcon = _ref2 => {\n  let {\n    alertCount,\n    alertFillColor,\n    alertTextColor,\n    callback,\n    renderOverlay,\n    url: src,\n    canvasSize\n  } = _ref2;\n  const img = document.createElement(\"img\");\n  img.crossOrigin = \"Anonymous\";\n  img.onload = function () {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = canvasSize;\n    canvas.height = canvasSize;\n    const context = canvas.getContext(\"2d\");\n    context.clearRect(0, 0, img.width, img.height);\n    context.drawImage(img, 0, 0, canvas.width, canvas.height);\n    if (alertCount) {\n      drawAlert(context, {\n        fillColor: alertFillColor,\n        textColor: alertTextColor,\n        text: alertCount,\n        canvasSize\n      });\n    }\n    if (renderOverlay) {\n      renderOverlay(canvas, context);\n    }\n    callback(context.canvas.toDataURL());\n  };\n  img.src = src;\n};\nvar updateHtmlIconLink = keepIconLink => {\n  if (typeof document === \"undefined\") {\n    return;\n  }\n  if (linkElements.length === 0) {\n    var head = document.getElementsByTagName(\"head\")[0];\n    const linkEl = document.createElement(\"link\");\n    linkEl.type = \"image/x-icon\";\n    linkEl.rel = \"icon\";\n    const linkApple = document.createElement(\"link\");\n    linkApple.rel = \"apple-touch-icon\";\n    linkElements.push(linkEl, linkApple);\n    var links = head.getElementsByTagName(\"link\");\n    for (var i = links.length; --i >= 0;) {\n      if (/\\bicon\\b/i.test(links[i].getAttribute(\"rel\")) && !keepIconLink(links[i])) {\n        head.removeChild(links[i]);\n      }\n    }\n    linkElements.forEach(el => head.appendChild(el));\n  }\n};\nvar defaultKeepIconLink = () => false;\nvar Favicon = _ref3 => {\n  let {\n    iconSize = DefaultCanvasSize,\n    alertCount = null,\n    alertFillColor = \"red\",\n    alertTextColor = \"white\",\n    animated = true,\n    animationDelay = 500,\n    keepIconLink = defaultKeepIconLink,\n    renderOverlay = null,\n    url = null\n  } = _ref3;\n  const animationIndex = (0, import_react.useRef)(0);\n  const animationTickIntervalId = (0, import_react.useRef)(null);\n  const [, updateState] = (0, import_react.useState)();\n  const forceUpdate = (0, import_react.useCallback)(() => updateState({}), []);\n  const onAnimationTick = (0, import_react.useCallback)(() => {\n    updateHtmlIconLink(keepIconLink);\n    animationIndex.current = (animationIndex.current + 1) % url.length;\n    forceUpdate();\n  }, [forceUpdate, keepIconLink, url]);\n  (0, import_react.useEffect)(() => {\n    onAnimationTick();\n  }, [onAnimationTick]);\n  const isAnimated = url instanceof Array && animated;\n  (0, import_react.useEffect)(() => {\n    if (isAnimated) {\n      if (!animationTickIntervalId.current) {\n        const intervalId = setInterval(onAnimationTick, animationDelay);\n        animationTickIntervalId.current = intervalId;\n      }\n    } else {\n      if (animationTickIntervalId.current) {\n        clearInterval(animationTickIntervalId.current);\n        animationTickIntervalId.current = null;\n        updateHtmlIconLink(keepIconLink);\n      }\n    }\n  }, [animationDelay, isAnimated, keepIconLink, onAnimationTick, url]);\n  const currentUrl = isAnimated ? url[animationIndex.current] : url instanceof Array ? url[0] : url;\n  if (alertCount || renderOverlay) {\n    drawIcon({\n      alertCount,\n      alertFillColor,\n      alertTextColor,\n      callback: url2 => {\n        linkElements.forEach(el => el.href = url2);\n      },\n      renderOverlay,\n      url: currentUrl,\n      canvasSize: iconSize\n    });\n  } else {\n    linkElements.forEach(el => el.href = currentUrl);\n  }\n  return null;\n};\nFavicon.propTypes = {\n  iconSize: import_prop_types.default.number,\n  alertCount: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),\n  alertFillColor: import_prop_types.default.string,\n  alertTextColor: import_prop_types.default.string,\n  animated: import_prop_types.default.bool,\n  animationDelay: import_prop_types.default.number,\n  keepIconLink: import_prop_types.default.func,\n  renderOverlay: import_prop_types.default.func,\n  url: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string), import_prop_types.default.string]).isRequired\n};\nvar src_default = Favicon;\nmodule.exports = module.exports.default;","map":{"version":3,"names":["src_exports","__export","default","src_default","module","exports","__toCommonJS","import_react","require","import_prop_types","__toESM","DefaultCanvasSize","linkElements","drawAlert","context","_ref","fillColor","text","textColor","canvasSize","Padding","font","w","Math","min","measureText","width","x","y","h","r","beginPath","moveTo","arcTo","closePath","fillStyle","fill","textBaseline","textAlign","fillText","drawIcon","_ref2","alertCount","alertFillColor","alertTextColor","callback","renderOverlay","url","src","img","document","createElement","crossOrigin","onload","canvas","height","getContext","clearRect","drawImage","toDataURL","updateHtmlIconLink","keepIconLink","length","head","getElementsByTagName","linkEl","type","rel","linkApple","push","links","i","test","getAttribute","removeChild","forEach","el","appendChild","defaultKeepIconLink","Favicon","_ref3","iconSize","animated","animationDelay","animationIndex","useRef","animationTickIntervalId","updateState","useState","forceUpdate","useCallback","onAnimationTick","current","useEffect","isAnimated","Array","intervalId","setInterval","clearInterval","currentUrl","url2","href","propTypes","number","oneOfType","string","bool","func","arrayOf","isRequired"],"sources":["/Users/yokkai/Documents/GitHub/landing_page/node_modules/react-favicon/src/index.jsx"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst DefaultCanvasSize = 16\nconst linkElements = []\n\nconst drawAlert = (context, { fillColor, text, textColor, canvasSize }) => {\n  // Allow same looking padding over differents iconSizes\n  const Padding = canvasSize / 5\n  // Allow readable text across differnts iconSizes\n  context.font = `bold ${canvasSize - Padding * 2}px arial`\n\n  const w =\n    Math.min(\n      // Take the text with if it's smaller than available space (eg: '2')\n      context.measureText(text).width,\n      // Or take the maximum size we'll force our text to fit in anyway (eg: '1000000')\n      canvasSize - Padding\n    ) + Padding\n\n  const x = canvasSize - w\n  const y = canvasSize / 2 - Padding\n  const h = Padding + canvasSize / 2\n  const r = Math.min(w / 2, h / 2)\n\n  context.beginPath()\n  context.moveTo(x + r, y)\n  context.arcTo(x + w, y, x + w, y + h, r)\n  context.arcTo(x + w, y + h, x, y + h, r)\n  context.arcTo(x, y + h, x, y, r)\n  context.arcTo(x, y, x + w, y, r)\n  context.closePath()\n  context.fillStyle = fillColor\n  context.fill()\n  context.fillStyle = textColor\n  context.textBaseline = 'bottom'\n  context.textAlign = 'right'\n  context.fillText(\n    text,\n    canvasSize - Padding / 2,\n    canvasSize,\n    // This will prevent the text from going outside the favicon, instead it'll squeeze his with to fit in\n    canvasSize - Padding\n  )\n}\n\nconst drawIcon = ({\n  alertCount,\n  alertFillColor,\n  alertTextColor,\n  callback,\n  renderOverlay,\n  url: src,\n  canvasSize,\n}) => {\n  const img = document.createElement('img')\n  img.crossOrigin = 'Anonymous'\n  img.onload = function () {\n    const canvas = document.createElement('canvas')\n    canvas.width = canvasSize\n    canvas.height = canvasSize\n\n    const context = canvas.getContext('2d')\n    context.clearRect(0, 0, img.width, img.height)\n    context.drawImage(img, 0, 0, canvas.width, canvas.height)\n\n    if (alertCount) {\n      drawAlert(context, {\n        fillColor: alertFillColor,\n        textColor: alertTextColor,\n        text: alertCount,\n        canvasSize,\n      })\n    }\n\n    if (renderOverlay) {\n      renderOverlay(canvas, context)\n    }\n    callback(context.canvas.toDataURL())\n  }\n  img.src = src\n}\n\nconst updateHtmlIconLink = (keepIconLink) => {\n  if (typeof document === 'undefined') {\n    return\n  }\n\n  if (linkElements.length === 0) {\n    var head = document.getElementsByTagName('head')[0]\n\n    const linkEl = document.createElement('link')\n    linkEl.type = 'image/x-icon'\n    linkEl.rel = 'icon'\n\n    const linkApple = document.createElement('link')\n    linkApple.rel = 'apple-touch-icon'\n\n    linkElements.push(linkEl, linkApple)\n\n    // remove existing favicons\n    var links = head.getElementsByTagName('link')\n    for (var i = links.length; --i >= 0; ) {\n      if (\n        /\\bicon\\b/i.test(links[i].getAttribute('rel')) &&\n        !keepIconLink(links[i])\n      ) {\n        head.removeChild(links[i])\n      }\n    }\n\n    linkElements.forEach((el) => head.appendChild(el))\n  }\n}\n\nconst defaultKeepIconLink = () => false\n\nconst Favicon = ({\n  iconSize = DefaultCanvasSize,\n  alertCount = null,\n  alertFillColor = 'red',\n  alertTextColor = 'white',\n  animated = true,\n  animationDelay = 500,\n  keepIconLink = defaultKeepIconLink,\n  renderOverlay = null,\n  url = null,\n}) => {\n  const animationIndex = useRef(0)\n  const animationTickIntervalId = useRef(null)\n\n  const [, updateState] = useState()\n  const forceUpdate = useCallback(() => updateState({}), [])\n\n  const onAnimationTick = useCallback(() => {\n    updateHtmlIconLink(keepIconLink)\n    animationIndex.current = (animationIndex.current + 1) % url.length\n    forceUpdate()\n  }, [forceUpdate, keepIconLink, url])\n\n  // Perform initial favicon update\n  useEffect(() => {\n    onAnimationTick()\n  }, [onAnimationTick])\n\n  const isAnimated = url instanceof Array && animated\n\n  useEffect(() => {\n    if (isAnimated) {\n      if (!animationTickIntervalId.current) {\n        const intervalId = setInterval(onAnimationTick, animationDelay)\n        animationTickIntervalId.current = intervalId\n      }\n    } else {\n      if (animationTickIntervalId.current) {\n        clearInterval(animationTickIntervalId.current)\n        animationTickIntervalId.current = null\n        updateHtmlIconLink(keepIconLink)\n      }\n    }\n  }, [animationDelay, isAnimated, keepIconLink, onAnimationTick, url])\n\n  const currentUrl = isAnimated\n    ? url[animationIndex.current]\n    : url instanceof Array\n    ? url[0]\n    : url\n\n  if (alertCount || renderOverlay) {\n    drawIcon({\n      alertCount,\n      alertFillColor,\n      alertTextColor,\n      callback: (url) => {\n        linkElements.forEach((el) => (el.href = url))\n      },\n      renderOverlay,\n      url: currentUrl,\n      canvasSize: iconSize,\n    })\n  } else {\n    linkElements.forEach((el) => (el.href = currentUrl))\n  }\n\n  return null\n}\n\nFavicon.propTypes = {\n  iconSize: PropTypes.number,\n  alertCount: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  alertFillColor: PropTypes.string,\n  alertTextColor: PropTypes.string,\n  animated: PropTypes.bool,\n  animationDelay: PropTypes.number,\n  keepIconLink: PropTypes.func,\n  renderOverlay: PropTypes.func,\n  url: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.string),\n    PropTypes.string,\n  ]).isRequired,\n}\n\nexport default Favicon\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}